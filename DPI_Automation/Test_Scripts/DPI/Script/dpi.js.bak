//USEUNIT common
//USEUNIT commonCSS
//USEUNIT xpath

function LogintoDPI(dpiUsername, dpiPassword)
{
  try{
    var fnTitle = "Login to DPI Application [" + dpiUsername + "]";
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle);
    sBrowser  = Project.Variables.sBrowser;
    sAppURL   = Project.Variables.dpiURL;
    
    tUserNameTb = xpath.usernameTb;
    tPasswordTb = xpath.passwordTb;
    tSignOnBtn  = xpath.signonBtn;
    tHomePage   = xpath.pngLogo;

    RunBrowserInPrivateMode(sBrowser, sAppURL);
  
    EnterValue_KeysCSS(tUserNameTb, dpiUsername);
    EnterValue_KeysCSS(tPasswordTb, dpiPassword);
    ClickButtonCSS(tSignOnBtn)
    tLoginErr="//div[@class='ping-error']"
    objLoginMsg= FindElementCSS(tLoginErr)
    if(objLoginMsg.Exists){
       LogError( "Login to dPI was not successful [" + dpiUsername+ "]");     
    }else{
      objExp=WaitForObjectCSS(tHomePage)
      //objExp = ClickAndWaitCSS(tSignOnBtn, tHomePage);
      if (objExp.Visible){
        strMessage = "Login to dPI was successful [" + dpiUsername+ "]"
        LogCheckpoint(strMessage)
        utilities.TestStep.pass_2(strMessage);
      }else{
        strMessage = "Login to dPI was not successful [" + dpiUsername+ "]"
        LogError(strMessage)
        utilities.TestStep.fail_2(strMessage);
      }
    }
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
}


function SearchMI(searchType, sInputValue)
{
  try{
    fnTitle = "Search MI [" + sInputValue + "]";
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle)
    var recordsFound = false;
    var expFound = false;
    var recordCount, tCurrRow, status;
    tSearchMITb = xpath.searchRepoTB
    tGCASTable  = xpath.gcasTbl
  
    EnterValue_KeysCSS(tSearchMITb, sInputValue)
    for (var i = 0; i <= 10; i++){
      recordCount = GetChildCountCSS(tGCASTable)
      if (recordCount > 0){
        recordsFound = true;
        break;
      }
    }
    if (recordsFound){
      if ((searchType == "GCAS NO") || (searchType == "ID")) {
        for (var i = 0; i <= recordCount-1; i++){
          tCurrRow = tGCASTable + "/div[@row-id='" + i + "']"
          objCurrRow = FindElementCSS(tCurrRow)
          tID   = tCurrRow + "/div[@col-id='id']";
          tName = tCurrRow + "/div[@col-id='name']";
          sID   = trim(GetPropertyValue(tID  , "innerText"))
          sName = trim(GetPropertyValue(tName, "innerText"))
          if ((sID == sInputValue) || (sName == sInputValue) && (sID!=null || sName!=null)){
            tDesc    = tCurrRow + "/div[@col-id='desc']";
            tStatus  = tCurrRow + "/div[@col-id='status']";
            tProcess = tCurrRow + "/div[@col-id='process']";
            sDesc    = GetPropertyValue(tDesc   , "innerText")
            sStatus  = GetPropertyValue(tStatus , "innerText")
            sProcess = GetPropertyValue(tProcess, "innerText")
            expFound = true;
            break;
          }
        }
        if (expFound){
          strMessage = "Expected Record: " + sInputValue + " was found."
          LogCheckpoint(strMessage)
          utilities.TestStep.pass_2(strMessage);
          
          strMessage = "Record ID: " + sID + "; Name: " + sName + "; Desc: " + sDesc + "; Status: " + sStatus + "; Process: " + sProcess
          LogMessage(strMessage);
          utilities.TestStep.info_2(strMessage);
        }else{
          strMessage = "Expected Record: " + sInputValue + " was not found."
//          LogError(strMessage)
//          utilities.TestStep.fail_2(strMessage);
        }
      }else{
        expFound = true;
        strMessage = recordCount + " records found for " + searchType + " - " + sInputValue + "."
        LogCheckpoint(strMessage)
        utilities.TestStep.pass_2(strMessage);
      }
    }else{
      strMessage = "No MI records found for GCAS " + sInputValue
      LogError(strMessage)
      utilities.TestStep.fail_2(strMessage);
    }
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
  return {tCurrRow:tCurrRow, status:expFound};
}




function MIMoreInfoOperations(tCurrRow, argOpeartion)
{
  try{
    fnTitle = "MI - More Info (" + argOpeartion + ")";
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle)
    var tRevInfoButtn = xpath.revInfoBtn
    var tRecordInfoBtn = tCurrRow + tRevInfoButtn
    var tExpectedMessage = xpath.MICopiedMessage;
    var tViewRecentMIBtn = xpath.viewRecentMIBtn;
    var tcloseWindowBtn = xpath.closeWindowBtn;
    var tMIHeader   = xpath.viewMIHeader;
    ClickButtonCSS(tRecordInfoBtn)
    if (argOpeartion == "Revise MI"){
      tCopyToReviseBtn = xpath.copyToReviseBtn;
      ClickAndWaitCSS(tCopyToReviseBtn, tExpectedMessage)
      aqUtils.Delay(3000)
      ClickButtonCSS(tcloseWindowBtn)
      objExp = ClickAndWaitCSS(tViewRecentMIBtn, tMIHeader)
      if (objExp.Exists){
        var tMIName     = xpath.MINameTB;
        var tMIRevision = xpath.MIRevisionTB;
        var sMIName     = GetPropertyValue(tMIName, "value")
        var sMIRevision = GetPropertyValue(tMIRevision, "value")
        strMessage = "New revision " + sMIName + "-" + sMIRevision + " was successfully created."
        LogCheckpoint(strMessage);
        utilities.TestStep.pass_2(strMessage);
      }else{
        strMessage = "Newly created version was not displayed properly."
        LogError(strMessage);
        utilities.TestStep.fail_2(strMessage);
      }
    }else if (argOpeartion == "Copy MI"){
      tCopyToCreateNewBtn = xpath.copyToCreateNewBtn;
      tExpectedMessage = xpath.MICopiedMessage;
      ClickAndWaitCSS(tCopyToCreateNewBtn, tExpectedMessage)
      aqUtils.Delay(3000)
      ClickButtonCSS(tcloseWindowBtn)
      objExp = ClickAndWaitCSS(tViewRecentMIBtn, tMIHeader)
      if (objExp.Exists){
        var tMIName     = xpath.MINameTB;
        var tMIRevision = xpath.MIRevisionTB;
        var sMIName     = GetPropertyValue(tMIName, "value")
        var sMIRevision = GetPropertyValue(tMIRevision, "value")
        strMessage = "New copy " + sMIName + "-" + sMIRevision + " was successfully created."
        LogCheckpoint(strMessage);
        utilities.TestStep.pass_2(strMessage);
      }else{
        strMessage = "Newly copy was not displayed properly."
        LogError(strMessage);
        utilities.TestStep.fail_2(strMessage);
      }
    }else if (argOpeartion == "View MI"){
      tViewButton   = xpath.viewMIBtn;
      ClickButtonCSS(tViewButton)
      aqUtils.Delay(10000)
      objMIHeader = FindElementCSS(tMIHeader)
      if (objMIHeader.Exists == false){
        tNotyError   = "//div[text() = 'Cannot Load Making Instruction']";
        objNotyError = WaitForObjectCSS(tNotyError)
        if (objNotyError.Exists){
          strMessage = "Unable to view the MI"
          LogError(strMessage);
          utilities.TestStep.fail_2(strMessage);
          tNotyMessage = tNotyError + "/following-sibling::div[@class='toast-message']"
          sNotyTitle   = GetPropertyValue(tNotyError  , "innerText")
          sNotyMessage = GetPropertyValue(tNotyMessage, "innerText")
          strMessage = "Received Error.\n" + sNotyTitle + "\n" + sNotyMessage
          LogError(strMessage);
          utilities.TestStep.fail_2(strMessage);
          ClearNotifications();
        }
      }else{
        strMessage = "MI Viewed successfully."
        LogCheckpoint(strMessage);
        utilities.TestStep.pass_2(strMessage);
      }
    }
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
}


function ViewMIRevision(argUserType, recordNo)
{
  try{
    fnTitle = "View MI Revision [" + argUserType + " user] - Record No " + recordNo;
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle)
    tGCASTbl = xpath.gcasTbl;
    tRecordNo = tGCASTbl + "/div[@row-index='" + (recordNo-1)  + "']"
    tViewButton   = xpath.viewMIBtn
    tRevInfoButtn = xpath.revInfoBtn
    tRecordInfoBtn = tRecordNo + tRevInfoButtn
  
    sRecordId = GetPropertyValue(tRecordNo + "/div[@col-id='id']"      , "innerText")
    sName     = GetPropertyValue(tRecordNo + "/div[@col-id='name']"    , "innerText")
    sDesc     = GetPropertyValue(tRecordNo + "/div[@col-id='desc']"    , "innerText")
    sStatus   = GetPropertyValue(tRecordNo + "/div[@col-id='status']"  , "innerText")
    sProcess  = GetPropertyValue(tRecordNo + "/div[@col-id='process']" , "innerText")
    LogMessage("Record ID: " + sRecordId + "; Name: " + sName + "; Desc: " + sDesc + "; Status: " + sStatus + "; Process: " + sProcess)
  
    ClickAndWaitCSS(tRecordInfoBtn, tViewButton)
    
    tMIOwnerName      = "//div[@id='ctrln-repo-more-owner']//span[1]/strong"
    tCurrentCheckout  = "//div[@id='ctrln-repo-more-owner']//span[2]/strong"
    sMIOwnerName      = GetPropertyValue(tMIOwnerName     , "innerText")
    sCurrentCheckout  = GetPropertyValue(tCurrentCheckout , "innerText")
    LogMessage("MI Owner: " + sMIOwnerName + "; Current Checkout: " + sCurrentCheckout)
    ClickButtonCSS(tViewButton)
    
    for (var i = 0; i <= 5; i++){
      aqUtils.Delay(10000)
      if (argUserType == utilities.sAuthorized){
        currUser = utilities.authUsername
        tMITitle = "//main[@id='ctrln-header-window']//span[@class='small ctrln-recipe-title']"
        sMITitle = GetPropertyValue(tMITitle, "innerText")
        if (aqString.Find(sMITitle, sRecordId) != -1){
          LogMessage("MI Revision Header: " + sMITitle)
          strMessage = "Authorized user[" + currUser + "] is able to view " + sRecordId + "[" + sName + "]";
          LogCheckpoint(strMessage) 
          utilities.TestStep.pass_2(strMessage);
          break;
        }else{
          tNotyError   = "//div[text() = 'Cannot Load Making Instruction']";
          objNotyError = FindElementCSS(tNotyError)
          if (objNotyError.Exists){
            strMessage   = "Authorized user[" + currUser + "] is not able to view " + sRecordId + "[" + sName + "]"
            tNotyMessage = tNotyError + "/following-sibling::div[@class='toast-message']"
            sNotyTitle   = GetPropertyValue(tNotyError  , "innerText")
            sNotyMessage = GetPropertyValue(tNotyMessage, "innerText")
            LogError(strMessage)
            utilities.TestStep.fail_2(strMessage);
            strMessage   = "Error:\n" + sNotyTitle + "\n" + sNotyMessage
            LogMessage(strMessage)
            utilities.TestStep.info_2(strMessage);
            ClearNotifications();
            break;
          }
        }
      }else if (argUserType == utilities.sUnauthorized){
        currUser = utilities.unAuthUsername
        tNotyError   = "//div[text() = 'Cannot Load Making Instruction']";
        objNotyError = WaitForObjectCSS(tNotyError)
        if (objNotyError.Exists){
          tNotyMessage = tNotyError + "/following-sibling::div[@class='toast-message']"
          sNotyTitle   = GetPropertyValue(tNotyError  , "innerText")
          sNotyMessage = GetPropertyValue(tNotyMessage, "innerText")
          strMessage   = "Unauthorized user[" + currUser + "] is not able to view " + sRecordId + "[" + sName + "]";
          LogCheckpoint(strMessage)
          utilities.TestStep.pass_2(strMessage);
          strMessage   = "Expected Error Found.\n" + sNotyTitle + "\n" + sNotyMessage
          LogMessage(strMessage)
          utilities.TestStep.info_2(strMessage);
          break;
        }
      }
    }
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
}




function AddMIOwner(ownername)
{  
  try{
    fnTitle = "Add New co-owner [" + ownername + "]";
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle)
    var tDPIOwnersLbl = xpath.dpiOwnersLbl;
    manageOwner_xpath="//div[@class='card']//button[@id='ctrln-header-owner']"  
    ClickButtonCSS(manageOwner_xpath)
    //select add owner button     
    addOwnerBtn_xpath="//button[@id='ctrln-owners-manage-add']"    
    ClickButtonCSS(addOwnerBtn_xpath)        
    ownerTable_xpath="//div[@class='ag-center-cols-container' and @role='rowgroup']"    
    objOwnerTable=FindElementCSS(ownerTable_xpath)        
    if (objOwnerTable.Exists){     
      ownerTableRow_xpath=`//div[@role='gridcell' and text()='${ownername}']//..//div[@class='ag-selection-checkbox']`     
      // ownerTableRow_xpath="//div[@role='gridcell' and text()='"+ownername+"']//..//div[@class='ag-selection-checkbox']"      
      objTableRow=FindElementCSS(ownerTableRow_xpath)      
      objTableRow.Click()  
      //click add onwer button    
      addNewOwner_xpath = "//div[@id='ctrln-owners-manage-container']//button[@id='ctrln-owners-manage-button']"    
      ClickButtonCSS(addNewOwner_xpath)
      UpdateMIOwnerWarningPopUp(true)
      sDPIOwners = GetPropertyValue(tDPIOwnersLbl, "innerText")
      if (aqString.Find(sDPIOwners, ownername) != -1){
        strMessage = "New Owner '" + ownername + "' was added to the co-owners list."
        LogCheckpoint(strMessage)
        utilities.TestStep.pass_2(strMessage);
      }else{
        strMessage = "New Owner '" + ownername + "' was not added to the co-owners list."
        LogError(strMessage)
        utilities.TestStep.fail_2(strMessage);
      }
    }else{      
      LogError("Owner table data is not displayed...")    
    }    
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
}



function RemoveMIOwner(ownername)
{  
  try{   
    fnTitle = "Remove co-owner [" + ownername + "]";
    utilities.TestStep = utilities.TestCase.createNode(fnTitle);
    Log.AppendFolder(fnTitle)     
    var tDPIOwnersLbl = xpath.dpiOwnersLbl;
    manageOwner_xpath="//div[@class='card']//button[@id='ctrln-header-owner']"  
    ClickButtonCSS(manageOwner_xpath)
    //select remove owner button     
    removeOwnerBtn_xpath="//button[@id='ctrln-owners-manage-delete']"    
    ClickButtonCSS(removeOwnerBtn_xpath)        
    ownerTable_xpath="//div[@class='ag-center-cols-container' and @role='rowgroup']"    
    objOwnerTable=FindElementCSS(ownerTable_xpath)        
    if (objOwnerTable.Exists){     
      ownerTableRow_xpath=`//div[@role='gridcell' and text()='${ownername}']//..//div[@class='ag-selection-checkbox']`     
      // ownerTableRow_xpath="//div[@role='gridcell' and text()='"+ownername+"']//..//div[@class='ag-selection-checkbox']"      
      objTableRow=FindElementCSS(ownerTableRow_xpath)      
      objTableRow.Click()  
      //click remove owner button    
      removeOwner_xpath = "//div[@id='ctrln-owners-manage-container']//button[@id='ctrln-owners-manage-button']"    
      ClickButtonCSS(removeOwner_xpath)
      UpdateMIOwnerWarningPopUp(true)
      sDPIOwners = GetPropertyValue(tDPIOwnersLbl, "innerText")
      if (aqString.Find(sDPIOwners, ownername) == -1){
        strMessage = "Owner '" + ownername + "' was removed from the co-owners list."
        LogCheckpoint(strMessage)
        utilities.TestStep.pass_2(strMessage);
      }else{
        strMessage = "Owner '" + ownername + "' was not removed in the co-owners list."
        LogError(strMessage)
        utilities.TestStep.fail_2(strMessage);
      }
    }else{      
      LogError("Owner table data is not displayed...")    
    }    
  }catch (e){
    strMessage = fnTitle + " was failed: " + e.message
    LogError(strMessage);
    utilities.TestStep.fail_2(strMessage);
  }
  finally{
    Log.PopLogFolder();
  }
}


function LogOffDPI()
{
 var tMenuBtn = xpath.menuBtn;
 var tLogoffBtn = xpath.logoffBtn;
 
 ClickAndWaitCSS(tMenuBtn, tLogoffBtn) 
 ClickButtonCSS(tLogoffBtn)
 aqUtils.Delay(3000)
}


function GetChildCountCSS(tSearchTag, objParent)
{
  var iChildCount;
  objExp = FindElementCSS(tSearchTag, objParent)
  if (objExp.Exists)
  {
    iChildCount = objExp.ChildCount;
  }
  return iChildCount 
}



function GetRevisionDetails(tGCASTable)
{
  var sRecordId, sName, sDesc, sStatus, sProcess
  tRecordNo  = xpath.firstRow
  tViewButton   = xpath.viewMIBtn
  
  sRecordId = GetPropertyValue(tRecordNo + "/div[@col-id='id']"      , "innerText")
  sName     = GetPropertyValue(tRecordNo + "/div[@col-id='name']"    , "innerText")
  sDesc     = GetPropertyValue(tRecordNo + "/div[@col-id='desc']"    , "innerText")
  sStatus   = GetPropertyValue(tRecordNo + "/div[@col-id='status']"  , "innerText")
  sProcess  = GetPropertyValue(tRecordNo + "/div[@col-id='process']" , "innerText")
  LogMessage("Record ID: " + sRecordId + "; Name: " + sName + "; Desc: " + sDesc + "; Status: " + sStatus + "; Process: " + sProcess)
  return {sRecordId:sRecordId, sName:sName, sDesc:sDesc, sStatus:sStatus, sProcess:sProcess}
}


function ClearNotifications()
{
  Indicator.Hide();
  var tNotyContainer    = "//div[@id='toast-container']"
  var tCloseButton      = tNotyContainer + "//button[@class='toast-close-button']"
  
  var objNotyContainer  = FindElementCSS(tNotyContainer)
  var arrNotifications  = FindElementsCSS(tCloseButton, objNotyContainer)
  
  for (var i = arrNotifications.length-1; i >= 0; i--){
    var objCloseBtn = arrNotifications[i];
    ClickButton(objCloseBtn) 
    aqUtils.Delay(1000)
  }
  Indicator.Show();
}

function UpdateMIOwnerWarningPopUp(proceedValue)
{  
  //proceedValue=false 
   modelpopup_xpath="//div[@class='modal-body']"  
  objModelPopUP=FindElementCSS(modelpopup_xpath)  
  if(objModelPopUP.Exists){    
    if (proceedValue){      
      proceedBtn_xpath="//div[@class='modal-footer']//button[contains(text(),'Proceed')]"      
      ClickButtonCSS(proceedBtn_xpath)    
    }else{      
      cancelBtn_xpath="//div[@class='modal-footer']//button[contains(text(),'Cancel')]"      
      ClickButtonCSS(cancelBtn_xpath)    
    }  
  }else{
    LogError("Model pop up is not displayed...")
  }
}


function SplitMIandRevision(argMIWithRev)
{
  var MI, Rev, arrMIWithRev;
  arrMIWithRev = argMIWithRev.split("-");
  Name = arrMIWithRev[0];
  Rev = arrMIWithRev[1];
  return {Name:Name, Rev:Rev}
}